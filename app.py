# Bibliotecas necess√°rias para o projeto
import pandas as pd
import plotly.express as px
import streamlit as st

# Carregamento e preparo dos dados

# Carrega o DataFrame a partir de um arquivo CSV local
vehicles_data = pd.read_csv('vehicles_clear.csv')

# Garante que 'model_year' seja tratada como categ√≥rica (string)
vehicles_data['model_year'] = vehicles_data['model_year'].astype(str)

# Identifica automaticamente colunas num√©ricas e categ√≥ricas
numeric_cols = vehicles_data.select_dtypes(include='number').columns.tolist()
categorical_cols = vehicles_data.select_dtypes(include='object').columns.tolist()

# Dicion√°rio para traduzir nomes t√©cnicos de colunas para nomes mais leg√≠veis
nomes_colunas = {
    "price": "Pre√ßo (R$)",
    "odometer": "Quilometragem (km)",
    "days_listed": "Dias para Venda",
    "model_year": "Ano de Fabrica√ß√£o",
    "cylinders": "N√∫mero de Cilindros",
    "is_4wd": "Tra√ß√£o 4x4",
    "paint_color": "Cor do Ve√≠culo",
    "condition": "Condi√ß√£o"
}

# Fun√ß√£o para traduzir nome t√©cnico para nome leg√≠vel
def traduzir_coluna(nome_tecnico):
    return nomes_colunas.get(nome_tecnico, nome_tecnico)

# Fun√ß√£o para traduzir nome leg√≠vel de volta para nome t√©cnico
def coluna_original(nome_legivel):
    inverso = {v: k for k, v in nomes_colunas.items()}
    return inverso.get(nome_legivel, nome_legivel)

# Cria listas com os nomes traduzidos para exibir nos componentes interativos
numeric_cols_legiveis = [traduzir_coluna(col) for col in numeric_cols]
categorical_cols_legiveis = [traduzir_coluna(col) for col in categorical_cols]

# Layout inicial da aplica√ß√£o Streamlit

# T√≠tulo principal da aplica√ß√£o
st.title('üìä Visual Analytics Interactive: Mercado de Ve√≠culos Usados')
st.markdown("---")
st.markdown("#### Selecione as vari√°veis e visualize os gr√°ficos interativos abaixo. üß≠")
st.markdown("---")

# Cria√ß√£o de caixas de sele√ß√£o para o usu√°rio escolher quais gr√°ficos visualizar
build_histogram = st.checkbox("üìå Histograma")
build_scatter = st.checkbox("üìå Gr√°fico de Dispers√£o")
build_bar = st.checkbox("üìå Gr√°fico de Barras")

# Histograma Interativo

if build_histogram:
    st.subheader("üìä Histograma Interativo")

    # Seleciona a vari√°vel a ser plotada no eixo X
    hist_legivel = st.selectbox("Escolha a vari√°vel para o eixo X", numeric_cols_legiveis, index=numeric_cols_legiveis.index("Dias para Venda"))
    hist_col = coluna_original(hist_legivel)

    # Controle deslizante para escolher n√∫mero de bins (faixas)
    bins = st.slider("N√∫mero de faixas (bins)", min_value=10, max_value=100, value=40)

    # Cria√ß√£o do gr√°fico de histograma
    hist_fig = px.histogram(
        vehicles_data,
        x=hist_col,
        nbins=bins,
        labels={hist_col: hist_legivel}
    )

    # Personaliza√ß√£o do layout do histograma
    hist_fig.update_layout(
        title=f"Distribui√ß√£o de {hist_legivel}",
        title_font_size=20,
        title_x=0,  # Alinha o t√≠tulo √† esquerda
        xaxis_title=hist_legivel,
        yaxis_title="Frequ√™ncia",
        xaxis=dict(showgrid=False),
        yaxis=dict(showgrid=True, gridcolor='lightgray'),
        height=500
    )

    # Customiza√ß√£o da apar√™ncia das barras
    hist_fig.update_traces(
        marker_color='green',
        marker_line_color='black',
        marker_line_width=1,
        opacity=0.8
    )

    # Exibe o gr√°fico no app
    st.plotly_chart(hist_fig)
    st.markdown("---")

# Gr√°fico de Dispers√£o Interativo

if build_scatter:
    st.subheader("üîç Gr√°fico de Dispers√£o Interativo")

    # Sele√ß√£o das vari√°veis para os eixos X, Y e a colora√ß√£o
    x_legivel = st.selectbox("Eixo X", numeric_cols_legiveis, index=numeric_cols_legiveis.index("Quilometragem (km)"))
    y_legivel = st.selectbox("Eixo Y", numeric_cols_legiveis, index=numeric_cols_legiveis.index("Pre√ßo (R$)"))
    color_legivel = st.selectbox("Colorir por", numeric_cols_legiveis + categorical_cols_legiveis, index=(numeric_cols_legiveis + categorical_cols_legiveis).index("Ano de Fabrica√ß√£o"))

    # Converte os nomes leg√≠veis para os nomes t√©cnicos
    x_axis = coluna_original(x_legivel)
    y_axis = coluna_original(y_legivel)
    color_by = coluna_original(color_legivel)

    # Cria√ß√£o do gr√°fico de dispers√£o
    scatter_fig = px.scatter(
        vehicles_data,
        x=x_axis,
        y=y_axis,
        color=color_by,
        color_continuous_scale="Cividis" if vehicles_data[color_by].dtype != 'object' else None,
        labels={
            x_axis: x_legivel,
            y_axis: y_legivel,
            color_by: color_legivel
        },
        hover_data=["paint_color", "condition"]  # Informa√ß√µes extras ao passar o mouse
    )

    # Ajuste do layout
    scatter_fig.update_layout(
        title=f"{y_legivel} vs {x_legivel} por {color_legivel}",
        title_font_size=20,
        title_x=0,  # Alinha o t√≠tulo √† esquerda
        height=500,
        xaxis=dict(range=[0, vehicles_data[x_axis].max()])  # Define o range do eixo X a partir dos dados
    )

    # Exibe o gr√°fico no app
    st.plotly_chart(scatter_fig)
    st.markdown("---")

# Gr√°fico de Barras Interativo

if build_bar:
    st.subheader("üìà Gr√°fico de Barras Interativo")

    # Sele√ß√£o da coluna categ√≥rica e da m√©trica num√©rica
    group_legivel = st.selectbox("Agrupar por", categorical_cols_legiveis)
    metric_legivel = st.selectbox("M√©trica de m√©dia", numeric_cols_legiveis, index=numeric_cols_legiveis.index("Dias para Venda"))

    # Convers√£o dos nomes para t√©cnicos
    group_col = coluna_original(group_legivel)
    metric_col = coluna_original(metric_legivel)

    # Agrupa os dados e calcula a m√©dia
    df_grouped = vehicles_data.groupby(group_col)[metric_col].mean().reset_index().sort_values(group_col)

    # Cria√ß√£o do gr√°fico de barras
    bar_fig = px.bar(
        df_grouped,
        x=group_col,
        y=metric_col,
        color=metric_col,
        color_continuous_scale="Cividis",
        labels={
            group_col: group_legivel,
            metric_col: f"M√©dia de {metric_legivel}"
        }
    )

    # Personaliza√ß√£o do layout
    bar_fig.update_layout(
        title=f"M√©dia de {metric_legivel} por {group_legivel}",
        title_font_size=20,
        title_x=0,
        xaxis=dict(type="category"),
        height=500
    )

    # Exibe o gr√°fico no app
    st.plotly_chart(bar_fig)
    st.markdown("---")
